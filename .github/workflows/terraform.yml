name: Infoblox Terraform CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
    paths:
      - 'environments/**'
      - 'live/**'
      - 'modules/**'
      - '*.tf'
      - '*.hcl'

env:
  TF_VERSION: 1.5.0
  TERRAGRUNT_VERSION: 0.50.0
  PYTHON_VERSION: 3.9
  # Azure Storage for Terraform state
  ARM_USE_MSI: true  # Use Managed Service Identity if running on Azure
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          pip install PyYAML

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Validate Configuration
        run: |
          chmod +x scripts/validate-config.sh
          ./scripts/validate-config.sh ${{ matrix.environment }}

      - name: Terraform Init
        run: |
          cd environments/${{ matrix.environment }}
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd environments/${{ matrix.environment }}
          terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: reports/results.sarif

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [dev, staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create terraform.tfvars
        run: |
          cd environments/${{ matrix.environment }}
          cat > terraform.tfvars << EOF
          infoblox_username   = "${{ secrets.INFOBLOX_USERNAME }}"
          infoblox_password   = "${{ secrets.INFOBLOX_PASSWORD }}"
          infoblox_server     = "${{ secrets.INFOBLOX_SERVER }}"
          infoblox_ssl_verify = true
          EOF

      - name: Terraform Init
        run: |
          cd environments/${{ matrix.environment }}
          terraform init

      - name: Terraform Plan
        run: |
          cd environments/${{ matrix.environment }}
          terraform plan -out=tfplan-${{ matrix.environment }}

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ matrix.environment }}
          path: environments/${{ matrix.environment }}/tfplan-${{ matrix.environment }}

      - name: Comment PR with Plan
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              const planOutput = execSync(
                `cd environments/${{ matrix.environment }} && terraform show -no-color tfplan-${{ matrix.environment }}`,
                { encoding: 'utf8', maxBuffer: 1024 * 1024 }
              );
              
              const comment = `## Terraform Plan - ${{ matrix.environment }}
              
              <details>
              <summary>Click to expand plan output</summary>
              
              \`\`\`
              ${planOutput}
              \`\`\`
              
              </details>`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error generating plan comment:', error);
            }

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create terraform.tfvars
        run: |
          cd environments/dev
          cat > terraform.tfvars << EOF
          infoblox_username   = "${{ secrets.INFOBLOX_USERNAME }}"
          infoblox_password   = "${{ secrets.INFOBLOX_PASSWORD }}"
          infoblox_server     = "${{ secrets.INFOBLOX_SERVER_DEV }}"
          infoblox_ssl_verify = false
          EOF

      - name: Deploy to Development
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh dev apply

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Infoblox Dev deployment: ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create terraform.tfvars
        run: |
          cd environments/staging
          cat > terraform.tfvars << EOF
          infoblox_username   = "${{ secrets.INFOBLOX_USERNAME }}"
          infoblox_password   = "${{ secrets.INFOBLOX_PASSWORD }}"
          infoblox_server     = "${{ secrets.INFOBLOX_SERVER_STAGING }}"
          infoblox_ssl_verify = true
          EOF

      - name: Deploy to Staging
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh staging apply

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Infoblox Staging deployment: ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy-prod]')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create terraform.tfvars
        run: |
          cd environments/prod
          cat > terraform.tfvars << EOF
          infoblox_username   = "${{ secrets.INFOBLOX_USERNAME }}"
          infoblox_password   = "${{ secrets.INFOBLOX_PASSWORD }}"
          infoblox_server     = "${{ secrets.INFOBLOX_SERVER_PROD }}"
          infoblox_ssl_verify = true
          EOF

      - name: Deploy to Production
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh prod apply

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "ðŸš€ Infoblox Production deployment: ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [plan]
    if: always()
    
    steps:
      - name: Remove temporary files
        run: |
          echo "Cleanup completed"
